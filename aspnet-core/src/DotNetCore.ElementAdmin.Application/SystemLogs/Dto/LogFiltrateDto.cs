namespace DotNetCore.ElementAdmin.SystemLogs.Dto
{
    // Generated by https://quicktype.io
    using System;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LogFiltrateInputDto
    {
        [JsonProperty("times")]
        public DateTimeOffset[] Times { get; set; }

        [JsonProperty("requestPath")]
        public string[] RequestPath { get; set; }

        [JsonProperty("context")]
        public string[] Context { get; set; }

        [JsonProperty("requestId")]
        public string RequestId { get; set; }

        [JsonProperty("filter1")]
        public string Filter1 { get; set; }

        [JsonProperty("filter2")]
        public string Filter2 { get; set; }
        [JsonProperty("msg")]
        public string Msg { get; set; }
        [JsonProperty("lv")]
        public string Lv { get; set; }

        [JsonProperty("ip")]
        public string Ip { get; set; }

        [JsonProperty("timeSelect")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TimeSelect { get; set; }

        [JsonProperty("pageIndex")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PageIndex { get; set; }

        [JsonProperty("pageSize")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PageSize { get; set; }

        public static LogFiltrateInputDto FromJson(string json) => JsonConvert.DeserializeObject<LogFiltrateInputDto>(json, Converter.Settings);

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}