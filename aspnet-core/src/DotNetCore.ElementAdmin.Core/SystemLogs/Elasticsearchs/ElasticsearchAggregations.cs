using System.Collections.Generic;
// Generated by https://quicktype.io

namespace DotNetCore.ElementAdmin.SystemLogs.Elasticsearch
{
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ElasticsearchAggregations
    {
        [JsonProperty("took")]
        public long Took { get; set; }

        [JsonProperty("timed_out")]
        public bool TimedOut { get; set; }

        [JsonProperty("_shards")]
        public ElasticsearchShards Shards { get; set; }

        [JsonProperty("hits")]
        public ElasticsearchHits Hits { get; set; }

        [JsonProperty("aggregations")]
        public Dictionary<string, ElasticsearchAggregationContexts> Aggregations { get; set; }

        public static ElasticsearchAggregations FromJson(string json) => JsonConvert.DeserializeObject<ElasticsearchAggregations>(json, Converter.Settings);

        public string ToJson() => JsonConvert.SerializeObject(this, Converter.Settings);

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }

    public partial class ElasticsearchAggregationContexts
    {
        [JsonProperty("doc_count_error_upper_bound")]
        public long DocCountErrorUpperBound { get; set; }

        [JsonProperty("sum_other_doc_count")]
        public long SumOtherDocCount { get; set; }

        [JsonProperty("buckets")]
        public ElasticsearchBucket[] Buckets { get; set; }
    }

    public partial class ElasticsearchBucket
    {
        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("doc_count")]
        public long DocCount { get; set; }
    }

    public partial class ElasticsearchHits
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("max_score")]
        public double MaxScore { get; set; }

        [JsonProperty("hits")]
        public object[] HitsHits { get; set; }
    }

    public partial class ElasticsearchShards
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("successful")]
        public long Successful { get; set; }

        [JsonProperty("skipped")]
        public long Skipped { get; set; }

        [JsonProperty("failed")]
        public long Failed { get; set; }

        [JsonProperty("failures")]
        public ElasticsearchFailure[] Failures { get; set; }
    }

    public partial class ElasticsearchFailure
    {
        [JsonProperty("shard")]
        public long Shard { get; set; }

        [JsonProperty("index")]
        public string Index { get; set; }

        [JsonProperty("node")]
        public string Node { get; set; }

        [JsonProperty("reason")]
        public ElasticsearchReason Reason { get; set; }
    }

    public partial class ElasticsearchReason
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("reason")]
        public string ReasonReason { get; set; }
    }
}
